import telebot
import config
import joi_parser
import random, re, time
import copy
from telebot import types

bot = telebot.TeleBot(config.TOKEN)


def polling(chat_id_):
    global qest_array, SCORE, flag, urls, key, TRIGER_ASUKA, CONTENT, amvs
    try:
        key = random.choice(list(qest_array.keys()))
        random.shuffle(qest_array[key])
        items = [types.KeyboardButton(x) for x in qest_array[key]]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        markup.add(*items)

        bot.send_message(chat_id_, key, parse_mode='html', reply_markup=markup)
        del qest_array[key]
    except Exception as error:
        flag = False
        key = None
        markup = types.ReplyKeyboardRemove()
        if SCORE <= len(config.question)//2:
            markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item3 = types.KeyboardButton("‚è≥ Restart")
            markup3.add(item3)
            bot.send_message(chat_id_, '–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {}/{} üëéüèª\n —ç—Ç–æ –º–∞–ª–æ –ø–æ—ç—Ç–æ–º—É —è –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∂—É –∫–∞—Ä—Ç–∏–Ω–∫–∏  '.format(SCORE, len(config.question)), reply_markup=markup3)
            sti = open('static/fuck.webp', 'rb')
            bot.send_sticker(chat_id_, sti)
        elif SCORE == len(config.question):
            markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üñº –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
            item2 = types.KeyboardButton("üé¨ –í–∏–¥–µ–æ –Ω–∞ YouTube")
            item3 = types.KeyboardButton("üéß –ú—É–∑—ã–∫–∞ –ø–æ —Ç–µ–º–µ")
            item4 = types.KeyboardButton("üìÜ –†–µ–ª–∏–∑ –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω: 3.0+1.0")
            item5 = types.KeyboardButton("üé≠ –ü—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            item6 = types.KeyboardButton("üé∂ AMV")
            item7 = types.KeyboardButton("üìñ –ö–Ω–∏–≥–∞")
            item8 = types.KeyboardButton("‚è≥ Restart")
            markup3.add(item1,item2,item3,item4,item5,item6,item7, item8)
            bot.send_message(chat_id_, '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {}/{}\n–í–∏–∂—É —Ç—ã —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —Ç–µ–º–µ'.format(SCORE, len(config.question)), reply_markup=markup3)
            sti = open('static/smile.webp', 'rb')
            bot.send_sticker(chat_id_, sti)
            urls = joi_parser.get_url()
            amvs = copy.copy(config.amv)
            CONTENT = True
        else:
            markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üñº –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
            item2 = types.KeyboardButton("üé¨ –í–∏–¥–µ–æ –Ω–∞ YouTube")
            item3 = types.KeyboardButton("üéß –ú—É–∑—ã–∫–∞ –ø–æ —Ç–µ–º–µ")
            item4 = types.KeyboardButton("üìÜ –†–µ–ª–∏–∑ –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω: 3.0+1.0")
            item5 = types.KeyboardButton("üé≠ –ü—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            item6 = types.KeyboardButton("üé∂ AMV")
            item7 = types.KeyboardButton("üìñ –ö–Ω–∏–≥–∞")
            item8 = types.KeyboardButton("‚è≥ Restart")
            markup3.add(item1,item2,item3,item4,item5,item6,item7, item8)
            bot.send_message(chat_id_, '–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {}/{} \n–≠—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—Ç–æ –±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ NGE'.format(SCORE, len(config.question)), reply_markup=markup3)
            urls = joi_parser.get_url()
            amvs = copy.copy(config.amv)
            CONTENT = True
        SCORE = 0
        TRIGER_ASUKA = 0

def polling_function(chat_id_):
    global qest_array, SCORE, flag, TRIGER_ASUKA
    sti = open('static/polling.webp', 'rb')
    bot.send_sticker(chat_id_, sti)

    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(chat_id_, "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º —Ç–µ–±–µ —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∫–æ—Ç–æ—Ä—ã—Ö\n–Ø —Ä–µ—à—É —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ ", reply_markup=markup)
    qest_array = copy.deepcopy(config.question)
    SCORE = 0
    TRIGER_ASUKA = 0 
    flag = True
    time.sleep(1)
    polling(chat_id_)

def hangman(chat_id_):
    global k
    k = random.choice(list(hungman_array.keys()))
    bot.send_photo(chat_id_, open(hungman_array[k][1], 'rb'))
    bot.send_message(chat_id_, "–í–æ–ø—Ä–æ—Å: "+hungman_array[k][0]+'\n–û—Ç–≤–µ—Ç: '+hungman_array[k][2]+'\n–ñ–∏–∑–Ω–∏: '+''.join( ['‚ù§Ô∏è' for _ in range(LIVE)] ))
    del hungman_array[k]

def hangman_function(chat_id_):
    global HANGMAN_FLAG, urls, CONTENT, amvs
    number = len(config.hungman_questions) - (len(hungman_array) - 1)
    if number <= len(config.hungman_questions):
        markup1 = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å", callback_data='yes_')
        markup1.add(item)
        bot.send_message(chat_id_, "–í–æ–ø—Ä–æ—Å ‚Ññ{}".format(number), reply_markup=markup1)
    else:
        if LIVE == config.number_of_lives:
            sti = open('static/asuka_smile.webp', 'rb')
            bot.send_sticker(chat_id_, sti)
            markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üñº –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
            item2 = types.KeyboardButton("üé¨ –í–∏–¥–µ–æ –Ω–∞ YouTube")
            item3 = types.KeyboardButton("üéß –ú—É–∑—ã–∫–∞ –ø–æ —Ç–µ–º–µ")
            item4 = types.KeyboardButton("üìÜ –†–µ–ª–∏–∑ –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω: 3.0+1.0")
            item5 = types.KeyboardButton("üé≠ –ü—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            item6 = types.KeyboardButton("üé∂ AMV")
            item7 = types.KeyboardButton("üìñ –ö–Ω–∏–≥–∞")
            item8 = types.KeyboardButton("‚è≥ Restart")
            markup3.add(item1,item2,item3,item4,item5,item6, item7, item8)
            bot.send_message(chat_id_, '–¢—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ –∂–∏–∑–Ω–∏ üëçüèª\n–ñ–∏–∑–Ω–∏ : {}\n–∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å–∏\n–∏ –ø–æ—Ö–æ–∂–µ —É —Ç–µ–±—è —Å–æ–≤—Å–µ–º –Ω–µ—Ç –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏\n–ù—É –Ω–∏—á–µ–≥–æ, –∑–∞—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ NGE'.format(''.join( ['‚ù§Ô∏è' for _ in range(LIVE)] )), reply_markup=markup3 )
            HANGMAN_FLAG = False
            CONTENT = True
            urls = joi_parser.get_url()
            amvs = copy.copy(config.amv)
        else:
            markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton("üñº –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
            item2 = types.KeyboardButton("üé¨ –í–∏–¥–µ–æ –Ω–∞ YouTube")
            item3 = types.KeyboardButton("üéß –ú—É–∑—ã–∫–∞ –ø–æ —Ç–µ–º–µ")
            item4 = types.KeyboardButton("üìÜ –†–µ–ª–∏–∑ –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω: 3.0+1.0")
            item5 = types.KeyboardButton("üé≠ –ü—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")
            item6 = types.KeyboardButton("üé∂ AMV")
            item7 = types.KeyboardButton("üìñ –ö–Ω–∏–≥–∞")
            item8 = types.KeyboardButton("‚è≥ Restart")
            markup3.add(item1,item2,item3,item4,item5,item6,item7, item8)
            bot.send_message(chat_id_, '–õ–∞–¥–Ω–æ –≤–∏–∂—É —Ç—ã –∑–Ω–∞–∫–æ–º —Å —Ç–µ–º–æ–π\n–¢–≤–æ–∏ –∂–∏–∑–Ω–∏: '+''.join( ['‚ù§Ô∏è' for _ in range(LIVE)] ), reply_markup=markup3)
            HANGMAN_FLAG = False
            CONTENT = True
            urls = joi_parser.get_url()
            amvs = copy.copy(config.amv)

        
#@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda msg: msg.text == '/start' or msg.text == '‚è≥ Restart')
def welcome(message):
    global used_art, flag, GLOBAL_FLAG, HANGMAN_FLAG, SOME_FLAG, ANOTHER_FLAG, CONTENT
    flag = False
    HANGMAN_FLAG = False
    GLOBAL_FLAG = True
    SOME_FLAG = True
    ANOTHER_FLAG = False
    CONTENT = False
    sti = open('static/welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)
    used_art = [x for x in range(1, config.NUMBER_ART + 1)]

    #keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé® –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
    item2 = types.KeyboardButton("üòä –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("‚è≥ Restart")

    markup.add(item1, item2, item3)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –ª—É—á—à–∞—è –¥–µ–≤–æ—á–∫–∞ –≤ –∞–Ω–∏–º–µ Neon Genesis Evangelion.\n–û–±—Ä–∞—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—ã –∑–∞—Å–ª—É–∂–∏—à—å –º–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in config.content_button )
def content_button_function(message):
    global CONTENT, amvs
    if CONTENT:
        if message.chat.type == 'private':
            if message.text == "üé¨ –í–∏–¥–µ–æ –Ω–∞ YouTube":
                markup1 = types.InlineKeyboardMarkup(row_width=1)
                item = types.InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data='eng')
                item1 = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='rus')
                item2 = types.InlineKeyboardButton("–Ø –ø–æ–Ω–∏–º–∞—é –æ–±–∞", callback_data='both')
                markup1.add(item, item1, item2)
                bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –¥–ª—è —Ç–µ—Ö –∫—Ç–æ –Ω–µ –ø–æ–Ω—è–ª, –∏ —Ç–µ—Ö –∫—Ç–æ –¥—É–º–∞–µ—Ç —á—Ç–æ –ø–æ–Ω—è–ª –≤—Å—é –≥–ª—É–±–∏–Ω—É –∑–∞–º—ã—Å–ª–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω–∞\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —É–¥–æ–±–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å", reply_markup=markup1)
            elif message.text == "üéß –ú—É–∑—ã–∫–∞ –ø–æ —Ç–µ–º–µ":
                markup1 = types.InlineKeyboardMarkup(row_width=2)
                item = types.InlineKeyboardButton("–¢—Ä–µ–∫–∏", callback_data='tracks')
                item1 = types.InlineKeyboardButton("–ê–ª—å–±–æ–º—ã", callback_data='album')
                markup1.add(item, item1)
                bot.send_message(message.chat.id, "–ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω –æ–∫–∞–∑–∞–ª –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ø–ø–æ–Ω–∏—é\n–Ω–æ –∏ –≤—ã—à–µ–ª –¥–∞–ª–µ–∫–æ –∑–∞ –µ—ë –ø—Ä–µ–¥–µ–ª—ã, –ª—é–¥–∏ –ø–æ —Ä–∞–∑–Ω–æ–º—ã —Ç—Ä–∞–∫—Ç—É—é—Ç –µ—ë —Å–º—ã—Å–ª—ã –∏ –≤–æ–ø–ª–æ—â–∞—é—Ç –∏—Ö –≤ –ø–µ—Å–Ω–∏", reply_markup=markup1)
            elif message.text == "üìÜ –†–µ–ª–∏–∑ –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω: 3.0+1.0":
                bot.send_message(message.chat.id, "–ü—Ä–µ–º—å–µ—Ä–∞ 27.06.2020 –≥–æ–¥–∞")
            elif message.text == "üé≠ –ü—Ä–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π":
                bot.send_message(message.chat.id, "https://evangelion.fandom.com/ru/wiki/%D0%9F%D0%B5%D1%80%D1%81%D0%BE%D0%BD%D0%B0%D0%B6%D0%B8_(%D0%BF%D0%BE%D1%80%D1%82%D0%B0%D0%BB)")
            elif message.text == "üé∂ AMV":
                try:
                    amv_ = random.choice(amvs)
                    bot.send_message(message.chat.id, amv_)
                    del amvs[amvs.index(amv_)]
                except Exception as erro:
                    bot.send_message(message.chat.id, '–≠—Ç–æ –≤—Å–µ —á—Ç–æ —è –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å')
            elif message.text == "üìñ –ö–Ω–∏–≥–∞":
                bot.send_message(message.chat.id, "https://www.amazon.com/Beautiful-Fighting-Girl-Saito-Tamaki/dp/0816654514")
            else:
                sti = open('static/something_went_wrong.webp', 'rb')
                bot.send_sticker(message.chat.id, sti)
                bot.send_message(message.chat.id, "–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ")

@bot.message_handler(func=lambda msg: msg.text == '–ù–∞—á–∞—Ç—å' )
def test_test(message):
    if message.chat.type == 'private':
        markup1 = types.InlineKeyboardMarkup(row_width=1)
        item = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='start_')
        item1 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=random.choice(['no','bad']))
        markup1.add(item, item1)
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –º—ã —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \n–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ, —è –∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å,\n–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (15 —Å–µ–∫.)\n–ü—Ä–∏–º–µ—Ä: –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω–∞ - –°._._.–î._._\n–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –°–ò–ù–î–ó–ò / —Å–∏–Ω–¥–∑–∏\n–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—à—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n—Ç–µ—Ä—è–µ—à—å –æ–¥–Ω—É –∏–∑ 5 –∂–∏–∑–Ω–µ–π ‚ù§Ô∏è".format(message.from_user), reply_markup=markup1)
        
            
@bot.message_handler(content_types=['text'])
def speak_function(message):
    global used_art, SCORE, flag, urls, key, TRIGER_ASUKA, GLOBAL_FLAG, HANGMAN_FLAG, LIVE, SOME_FLAG
    if GLOBAL_FLAG:
        if message.chat.type == 'private':
            if message.text == "üé® –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç":
                try:
                    num = random.choice(used_art)
                    used_art.remove(num)
                    if num == 5:
                        path = 'static/asuka_art/art'+str(num)+'.png'
                        art = open(path, 'rb')
                        bot.send_photo(message.chat.id, art)
                        bot.send_message(message.chat.id, "–û–π üòìüòå –∫–∞–∫ —ç—Ç–æ —Å—é–¥–∞ –ø–æ–ø–∞–ª–æ")
                    else:
                        path = 'static/asuka_art/art'+str(num)+'.png'
                        art = open(path, 'rb')
                        bot.send_photo(message.chat.id, art)
                    print(used_art)
                except IndexError:
                    sti = open('static/irritation.webp', 'rb')
                    bot.send_sticker(message.chat.id, sti)

                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True ,one_time_keyboard=True)
                    item3 = types.KeyboardButton("–ö–∞–∫ –º–Ω–µ —É–≤–∏–¥–µ—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?")
                    markup.add(item3)
                    bot.send_message(message.chat.id, "–•–≤–∞—Ç–∏—Ç —Å —Ç–µ–±—è ", reply_markup=markup)

            elif message.text == "–ö–∞–∫ –º–Ω–µ —É–≤–∏–¥–µ—Ç—å –µ—â–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏?":
                markup1 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
                item2 = types.InlineKeyboardButton("–ù–µ —Ö–æ—á—É", callback_data='bad')

                markup1.add(item1, item2)

                bot.send_message(message.chat.id, "–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=markup1)

            elif message.text == "üòä –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item = types.KeyboardButton("üé® –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
                item1 = types.KeyboardButton("–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ üòÖ")
                item3 = types.KeyboardButton("‚è≥ Restart")
                markup.add(item, item1, item3)
                bot.send_message(message.chat.id, "–ö–∞–∫ –±–∞–Ω–∞–ª—å–Ω–æ... –ù—É –ø—Ä–∏–≤–µ—Ç", reply_markup=markup)

            #elif message.text in reduce(lambda x,y: x+y, list(config.question.values())):
            elif flag:
                if message.text in config.question[key]:
                    #print (key, message.text, config.question[key][0], config.question[key])
                    if message.text == config.question[key][0]:
                        SCORE += 1
                        bot.send_message(message.chat.id, random.choice(config.good_phrase))
                    else:
                        bot.send_message(message.chat.id, '...üëäüèª')
                    polling(message.chat.id)
                else:
                    bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –±–∞–∫–∞ üò¢")

            elif flag and message.text not in config.question[key]:
                if TRIGER_ASUKA == 0:
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤')
                    TRIGER_ASUKA += 1
                elif TRIGER_ASUKA == 1:
                    bot.send_message(message.chat.id, '–°–ª—É—à–∞–π, —Ç—ã —á—Ç–æ –¥—É—Ä–∞–∫? –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é üò†')
                    TRIGER_ASUKA += 1
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item3 = types.KeyboardButton("‚è≥ Restart")

                    markup.add(item3)
                    bot.send_message(message.chat.id, '–ó–Ω–∞–µ—à—å —á—Ç–æ, —Ä–∞–∑ —Ç–µ–±–µ —Ç–∞–∫ –≤–µ—Å–µ–ª–æ –ø–∏—Å–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç üò°\n —Ç–∞–∫ –¥–µ–ª–∞–π —ç—Ç–æ –∏ –¥–∞–ª—å—à–µ –Ω–æ —É–∂–µ –±–µ–∑ –º–µ–Ω—è üò§', reply_markup = markup)
                    flag = False
                    GLOBAL_FLAG = False

            elif message.text == "–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ üòÖ":
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item3 = types.KeyboardButton("‚è≥ Restart")
                markup.add(item3)
                bot.send_message(message.chat.id, '–Ø –ª—É—á—à–∏–π –ø–∏–ª–æ—Ç –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω–∞, –º–Ω–µ –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö.\n ', reply_markup = markup)
                    
                markup1 = types.InlineKeyboardMarkup(row_width=2)
                item1 = types.InlineKeyboardButton("–ö–æ–Ω–µ—á–Ω–æ", callback_data='yes')
                item2 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no')

                markup1.add(item1, item2)

                bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ? —Ç–æ–≥–¥–∞ –¥–æ–∫–∞–∂–∏ —á—Ç–æ —Ç—ã —Ç–æ–∂–µ –Ω–∞ —á—Ç–æ-—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω\n", reply_markup=markup1)


            elif HANGMAN_FLAG:
                if message.text.replace(' ', '').lower() == k:
                    bot.send_message(message.chat.id, random.choice(config.good_phrase))
                    HANGMAN_FLAG = False
                    SOME_FLAG = True
                else:
                    HANGMAN_FLAG = False
                    SOME_FLAG = True
                    LIVE -= 1
                    bot.send_message(message.chat.id, 'üíî')
                    
            elif message.text == "üñº –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç":
                try:
                    print (len(urls))
                    #random.shuffle(urls)
                    bot.send_message(message.chat.id, urls.pop())
                except IndexError:
                    urls = joi_parser.get_url("/"+str(config.PAGE))
                    config.PAGE -= 1
                    #random.shuffle(urls)
                    bot.send_message(message.chat.id, urls.pop())
            else:
                bot.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –±–∞–∫–∞ üò¢")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ —Ö–æ—Ä–æ—à–æ')
                polling_function(call.message.chat.id)
            elif call.data == 'bad':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item = types.KeyboardButton("üé® –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
                item1 = types.KeyboardButton("–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ üòÖ")
                item3 = types.KeyboardButton("‚è≥ Restart")
                markup.add(item, item1, item3)
                bot.send_message(call.message.chat.id, '–ö–∞–∫ —Ö–æ—á–µ—à—å', reply_markup=markup)
            elif call.data == 'yes':
                markup1 = types.InlineKeyboardMarkup(row_width=1)
                item = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='start_')
                #item1 = types.InlineKeyboardButton("–ù–µ—Ç", callback_data=random.choice(['no','bad']))
                markup1.add(item)
                #bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –º—ã —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \n–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ, —è –∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å,\n–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (15 —Å–µ–∫.)\n–ü—Ä–∏–º–µ—Ä: –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω–∞ - –°._._.–î._._\n–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –°–ò–ù–î–ó–ò / —Å–∏–Ω–¥–∑–∏\n–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—à—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n—Ç–µ—Ä—è–µ—à—å –æ–¥–Ω—É –∏–∑ 5 –∂–∏–∑–Ω–µ–π ‚ù§Ô∏è".format(message.from_user), reply_markup=markup1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text="–°–µ–π—á–∞—Å –º—ã —Å—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \n–ü—Ä–∞–≤–∏–ª–∞ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ, —è –∑–∞–¥–∞—é –≤–æ–ø—Ä–æ—Å,\n–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (15 —Å–µ–∫.)\n–ü—Ä–∏–º–µ—Ä: –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π –ï–≤–∞–Ω–≥–µ–ª–∏–æ–Ω–∞ - –°._._.–î._._\n–¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –°–ò–ù–î–ó–ò / —Å–∏–Ω–¥–∑–∏\n–ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞–µ—à—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n—Ç–µ—Ä—è–µ—à—å –æ–¥–Ω—É –∏–∑ 5 –∂–∏–∑–Ω–µ–π ‚ù§Ô∏è".format(call.message.from_user), reply_markup=markup1)

            elif call.data == 'no':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text='–ù—É –∏ –ª–∞–¥–Ω–æ', reply_markup=None)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item = types.KeyboardButton("üé® –ü–æ–ø—Ä–æ—Å–∏—Ç—å –∞—Ä—Ç")
                item1 = types.KeyboardButton("–ú–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ üòÖ")
                item3 = types.KeyboardButton("‚è≥ Restart")
                markup.add(item, item1, item3)
                #bot.send_message(call.message.chat.id, "–ù—É –∏ –õ–∞–¥–Ω–æ", reply_markup=markup)
                sti = open('static/reaction.webp', 'rb')
                bot.send_sticker(call.message.chat.id, sti, reply_markup=markup)
            elif call.data == 'start_':
                global HANGMAN_FLAG, hungman_array, LIVE, SOME_FLAG, ANOTHER_FLAG
                for x in range(2, 0, -1):
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text=str(x), reply_markup=None)
                    time.sleep(1)

                HANGMAN_FLAG = False
                SOME_FLAG = False
                ANOTHER_FLAG = True
                LIVE = config.number_of_lives
                hungman_array = copy.copy(config.hungman_questions)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text='START', reply_markup=None)
                #bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='START')
                hangman_function(call.message.chat.id)
            elif call.data == 'yes_':
                hangman(call.message.chat.id)
                HANGMAN_FLAG = True
                SOME_FLAG = False
                for x in range(15, -1, -1):
                    if SOME_FLAG:
                        break
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text='‚è± '+str(x), reply_markup=None)
                    #bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text=str(x))
                    time.sleep(1)
                if ANOTHER_FLAG:
                    if x == 0:
                        LIVE -= 1
                        bot.send_message(call.message.chat.id, 'üíî')
                        if LIVE == 0:
                            HANGMAN_FLAG = False
                            bot.send_message(call.message.chat.id, 'Game Over')
                            #bot.answer_callback_query(callback_query_id=call.message.chat.id, show_alert=False, text='Game Over')
                        else:
                            hangman_function(call.message.chat.id)
                    else:
                        hangman_function(call.message.chat.id)
                else:
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                    text='', reply_markup=None)

            elif call.data == 'eng':
                for video in config.eva_videos_eng:
                    bot.send_message(chat_id=call.message.chat.id, text=video)
            
            elif call.data == 'rus':
                for video in config.eva_videos_rus:
                    bot.send_message(chat_id=call.message.chat.id, text=video)   
            
            elif call.data == 'both':
                for video in config.eva_videos_eng + config.eva_videos_rus:
                    bot.send_message(chat_id=call.message.chat.id, text=video)   

            elif call.data == 'tracks':
                for track in config.eva_tracks:
                    audio = open(track, 'rb')
                    bot.send_audio(call.message.chat.id, audio)

            elif call.data == 'album':
                for alb in config.albums:
                    bot.send_message(chat_id=call.message.chat.id, text=alb)
            # remove inline buttons
            #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
            #    text="–ú–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=None)

            # show alert
                #bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text='START')
                            
    except Exception as error:
        print(repr(error))

# RUN
bot.polling(none_stop=True)

